on:
  push:
    branches:
      - main
jobs:
  tests:
    name: Test app
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
      - name: Cache Poetry virtualenvs
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-venv-${{ runner.os }}-
      - name: Install dependencies (with Poetry)
        run: poetry install --no-interaction --no-ansi
      - name: Run docker-compose
        run: docker compose up -d --build
      - name: Run tests
        run: poetry run pytest tests
        env:
          APP_URL: http://localhost:8000
          DATABASE_ENGINE: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_USER}

      - run: docker compose logs app
        if: always()

      - name: Surface failing tests
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results
  release:
    name: Release app
    runs-on: ubuntu-latest
    needs: tests
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: gh release create $(git rev-parse --short HEAD) --generate-notes
        env:
          GH_TOKEN: ${{ github.token }}

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: release
    steps:
      - run: echo "Deploying..."

